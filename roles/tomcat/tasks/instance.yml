---
- name: Ensure Java is installed.
  package:
    name: "{{ java_version }}"
    state: present

- name: Export JAVA_HOME as a variable
  shell: readlink -f /usr/bin/javac | cut -d/ -f1-5
  register: JAVA_HOME
  environment:
    JAVA_HOME: JAVA_HOME

- name: Ensure instance directory exists
  file:
    path: "{{ tomcat_directory }}/{{ instance.name }}"
    state: directory
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"

- name: Ensure tomcat document root exists
  file:
    path: "{{ instance.appbase }}/{{ instance.docbase }}"
    state: directory
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"

- name: Install tomcat instance
  unarchive:
    src: "apache-tomcat-{{ instance.version }}.tar.gz"
    dest: "{{ tomcat_directory }}/{{ instance.name }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_directory }}/{{ instance.name }}/bin"
    validate_certs: "{{ tomcat_validate_certs }}"
  register: install_tomcat
  until: install_tomcat is succeeded
  retries: 3

- name: Save instance name
  set_fact:
    instance_name: "{{ instance.name }}"

- name: Configure tomcat bash_profile
  template:
    src: bash_profile.j2
    dest: "{{ tomcat_userhome }}/.bash_profile"

- name: Configure tomcat instance - server.xml
  template:
    src: server.xml.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/conf/server.xml"
  # notify:
  #   - restart tomcat instance

- name: Configure tomcat instance - logging.properties
  template:
    src: logging.properties.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/conf/logging.properties"
  # notify:
  #   - restart tomcat instance

- name: Configure tomcat instance - setenv.sh
  template:
    src: setenv.sh.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/bin/setenv.sh"
  # notify:
  #   - restart tomcat instance

- name: Configure instance sample page - was_test.jsp
  copy:
    src: was_test.jsp
    dest: "{{ instance.appbase }}/{{ instance.appname }}"

- name: Recursively change owners, permission of files
  command: find "{{ item }}" -type f -exec chmod 640 {} \;
  with_items:
  - "{{ tomcat_directory }}"
  - "{{ instance.appbase }}"
  - /logfs

- name: Recursively change owners, permission of directories
  command: find "{{ item }}" -type d -exec chmod 750 {} \;
  with_items:
  - "{{ tomcat_directory }}"
  - "{{ instance.appbase }}"
  - /logfs

- name: Recursively change owners, permission of tomcat bin
  command: find "{{ tomcat_directory }}/{{ instance.name }}/bin" -type f -exec chmod 750 {} \;

- name: Start tomcat instance
  command: "nohup {{ tomcat_directory }}/{{ instance.name }}/bin/startup.sh"
  become: true
  become_user: "{{ tomcat_user }}"

- name: Check if instacne is availble 
  uri:
    url: http://localhost:8080

# - name: create service instance
#   import_role:
#     name: robertdebock.service
#   vars:
#     service_list:
#       - name: "{{ instance.name | default(tomcat_name) }}"
#         description: "{{ instance.name | default(tomcat_name) }}"
#         start_command: "{{ tomcat_directory }}/{{ instance.name | default(tomcat_directory) }}/bin/catalina.sh run"
#         user_name: "{{ instance.user | default(tomcat_user) }}"
#         group_name: "{{ instance.group | default(tomcat_group) }}"

# - name: start and enable tomcat instance
#   service:
#     name: "{{ instance.name }}"
#     state: started
#     enabled: yes
#   when:
#     - ansible_virtualization_type != "docker"

# - name: loop over wars
#   include: war.yml
#   with_items: "{{ instance.wars }}"
#   loop_control:
#     loop_var: war
#   when:
#     - instance.wars is defined

# - name: loop over libs
#   include: lib.yml
#   with_items: "{{ instance.libs }}"
#   loop_control:
#     loop_var: lib
#   when:
#     - instance.libs is defined
